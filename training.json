{"prerequisites":[],"outcomes":[],"show_stepper_bar":true,"description":"SQL Injection for KYPO Cyber Range Platform","state":"UNRELEASED","title":"sql-injection-demo-training","estimated_duration":45,"variant_sandboxes":false,"levels":[{"title":"Overview","estimated_duration":0,"level_type":"INFO_LEVEL","content":"**SQL injection** is a code injection technique that exploits the vulnerabilities in the interface between **web applications** and **database servers**. The vulnerability is present when **user\u2019s inputs are not correctly checked within the web applications before being sent to the back-end database servers**.\n\nMany web applications take inputs from users, and then use these inputs to construct SQL queries, so they can get information from the database. Web applications also use SQL queries to store information in the database. These are common practices in the development of web applications. When SQL queries are not carefully constructed, SQL injection vulnerabilities can occur. **SQL injection is one of the most common attacks on web applications**.\n\nIn this lab, we have created a web application that is vulnerable to the SQL injection attack. Our web application includes the common mistakes made by many web developers. **Students\u2019 goal is to find ways to exploit the SQL injection vulnerabilities, demonstrate the damage that can be achieved by the attack, and master the techniques that can help defend against such type of attacks**. This lab covers the following topics:\n- SQL statements: SELECT and UPDATE statements\n- SQL injection\n- Prepared statement","order":0},{"title":"Lab Environment","estimated_duration":0,"level_type":"INFO_LEVEL","content":"We have developed a web application for this lab, and we use containers to set up this web application. There are **two containers** in the lab setup, one for **hosting the web application** and the other for **hosting the database** for the web application. The **IP address for the web application** container is `10.9.0.5`, and The **URL for the web application** is the following:\n\n```\nhttp:\/\/www.seed-server.com\n```\n\nWe need to map this hostname to the container\u2019s IP address. Please add the following entry to the `\/etc\/hosts` file. You need to use the root privilege to change this file (using `sudo`). It should be noted that this name might have already been added to the file due to some other labs. If it is mapped to a different IP address, the old entry must be removed.\n```\n10.9.0.5 www.seed-server.com\n```\n\n---\n## 2.1 Container Setup and Commands\nPlease download the Labsetup.zip file to your VM from the lab\u2019s website, unzip it, enter the `Labsetup` folder, and use the `docker-compose.yml` file to set up the lab environment. Detailed explanation of the content in this file and all the involved Dockerfile can be found from the user manual, which is linked to the website of this lab. If this is the first time you set up a SEED lab environment using containers, it is very important that you read the user manual.\n\nIn the following, we list some of the commonly used commands related to Docker and Compose. Since we are going to use these commands very frequently, we have created aliases for them in the `.bashrc` file (in our provided SEEDUbuntu 20.04 VM).\n\n```\n$ docker-compose build # Build the container image\n$ docker-compose up # Start the container\n$ docker-compose down # Shut down the container\n\/\/ Aliases for the Compose commands above\n$ dcbuild # Alias for: docker-compose build\n$ dcup # Alias for: docker-compose up\n$ dcdown # Alias for: docker-compose down\n```\n\nAll the containers will be running in the background. To run commands on a container, we often need to get a shell on that container. We first need to use the **\"docker ps\"** command to find out the ID of the container, and then use \"docker exec\" to start a shell on that container. We have created aliases for them in the `.bashrc` file.\n\n```\n$ dockps \/\/ Alias for: docker ps --format \"{{.ID}} {{.Names}}\"\n$ docksh <id> \/\/ Alias for: docker exec -it <id> \/bin\/bash\n\/\/ The following example shows how to get a shell inside hostC\n$ dockps\nb1004832e275 hostA-10.9.0.5\n0af4ea7a3e2e hostB-10.9.0.6\n9652715c8e0a hostC-10.9.0.7\n$ docksh 96\nroot@9652715c8e0a:\/#\n\/\/ Note: If a docker command requires a container ID, you do not need to\n\/\/ type the entire ID string. Typing the first few characters will\n\/\/ be sufficient, as long as they are unique among all the containers.\n```\n\n**MySQL database:** Containers are usually disposable, so once it is destroyed, all the data inside the containers are lost. For this lab, we do want to keep the data in the MySQL database, so we do not lose our work when we shutdown our container. To achieve this, we have mounted the mysql data folder on the host machine (inside `Labsetup`, it will be created after the MySQL container runs once) to the `\/var\/lib\/mysql` folder inside the MySQL container. This folder is where MySQL stores its database.\n\nTherefore, even if the container is destroyed, data in the database are still kept. If you do want to start from a clean database, you can remove this folder:\n```\n$ sudo rm -rf mysq\n```\n\n---\n## 2.2 About the Web Application\n\nWe have created a web application, which is a simple employee management application. Employees can view and update their personal information in the database through this web application. There are mainly two roles in this web application: Administrator is a privilege role and can manage each individual employees\u2019 profile information; Employee is a normal role and can view or update his\/her own profile information. **All employee information is described in Table 1**.\n\n| Name  | Employee ID | Password  | Salary | Birthday | SSN      | Nickname | Email | Address | Phone# |\n|:-----:|:-----------:|:---------:|:------:|:--------:|:--------:|:--------:|:-----:|:-------:|:------:|\n| Admin | 99999       | seedadmin | 400000 | 05-Mar   | 43254314 |          |       |         |        |\n| Alice | 10000       | seedalice | 20000  | 20-Sep   | 10211002 |          |       |         |        |\n| Boby  | 20000       | seedboby  | 50000  | 20-Apr   | 10213352 |          |       |         |        |\n| Ryan  | 30000       | seedryan  | 90000  | 10-Apr   | 32193525 |          |       |         |        |\n| Samy  | 40000       | seedsamy  | 40000  | 11-Jan   | 32111111 |          |       |         |        |\n| Ted   | 50000       | seedted   | 110000 | 03-Nov   | 24343244 |          |       |         |        |\n","order":1},{"answer_variable_name":null,"attachments":[],"solution_penalized":true,"hints":[],"title":"Task1: Get Familiar with SQL Statements","estimated_duration":15,"level_type":"TRAINING_LEVEL","content":"The objective of this task is to get familiar with SQL commands by playing with the provided database. The data used by our web application is stored in a MySQL database, which is hosted on our MySQL container.\n\nWe have created a database called `sqllab_users`, which contains a table called `credential`. **The table stores the personal information** (e.g. eid, password, salary, ssn, etc.) of every employee. **In this task, you need to play with the database to get familiar with SQL queries**.\n\nPlease get a shell on the MySQL container (see the container manual for instruction; the manual is linked to the lab\u2019s website). Then use the mysql client program to interact with the database. **The user name is root and password is dees**.\n\n```\n\/\/ Inside the MySQL container\n# mysql -u root -pdees\n```\n\nAfter login, you can create new database or load an existing one. As we have already created the sqllab users database for you, **you just need to load this existing database using the use command**. To show what tables are there in the sqllab users database, you can **use the show tables command to print out all the tables of the selected database**.\n```\nmysql> use sqllab_users;\nDatabase changed\nmysql> show tables;\n+------------------------+\n| Tables_in_sqllab_users |\n+------------------------+\n| credential             |\n+------------------------+\n```\nAfter running the commands above, you need to use a SQL command to print all the profile information of the employee Alice. Please provide the screenshot of your results. When you are done, enter `Solved` as this level's solution.\n","variant_answers":false,"solution":"follow the instructions.","answer":"SQL","max_score":50,"incorrect_answer_limit":0,"order":2,"reference_solution":[]},{"answer_variable_name":null,"attachments":[],"solution_penalized":true,"hints":[],"title":"Task 2: SQL Injection Attack on SELECT Statement","estimated_duration":30,"level_type":"TRAINING_LEVEL","content":"SQL injection is basically a technique through which attackers can execute their own malicious SQL statements generally referred as malicious payload. Through the malicious SQL statements, attackers can steal information from the victim database; even worse, they may be able to make changes to the database. Our\nemployee management web application has SQL injection vulnerabilities, which mimic the mistakes frequently made by developers.\n\nWe will use the login page from www.seed-server.com for this task. It asks users to provide a user name and a password. The web application authenticate users based on these two pieces of data, so only employees who know their passwords are allowed to log in. Your job, as an attacker, is to log into the web application without knowing any employee\u2019s credential.\n\nTo help you started with this task, we explain how authentication is implemented in the web application. The PHP code `unsafe_home.php`, located in the `\/var\/www\/SQL_Injection` directory, is used to conduct user authentication. The following code snippet show how users are authenticated.\n\n```\n$input_uname = $_GET[\u2019username\u2019];\n$input_pwd = $_GET[\u2019Password\u2019];\n$hashed_pwd = sha1($input_pwd);\n...\n$sql = \"SELECT id, name, eid, salary, birth, ssn, address, email,\nnickname, Password\nFROM credential\nWHERE name= \u2019$input_uname\u2019 and Password=\u2019$hashed_pwd\u2019\";\n$result = $conn -> query($sql);\n\/\/ The following is Pseudo Code\nif(id != NULL) {\n  if(name==\u2019admin\u2019) {\n    return All employees information;\n  } \n  else if (name !=NULL){\n    return employee information;\n  }\n} else {\n  Authentication Fails;\n}\n```\n\nThe above SQL statement selects personal employee information such as id, name, salary, ssn etc from the **credential table**. The SQL statement uses two variables `input_uname` and `hashed_pwd`, where `input_uname` holds the string typed by users in the username field of the login page, while `hashed_pwd` holds the **sha1 hash of the password** typed by the user. The program checks whether any record matches with the provided username and password; if there is a match, the user is successfully authenticated, and is given the corresponding employee information. If there is no match, the authentication fails.\n\n## Task 2.1: SQL Injection Attack from webpage. \nYour task is to log into the web application as the administrator from the login page, so you can see the information of all the employees. We assume that\nyou do know the administrator\u2019s account name which is `admin`, but you do not the password. You need to decide what to type in the `Username` and `Password` fields to succeed in the attack.\n\n## Task 2.2: SQL Injection Attack from command line. \nYour task is to repeat `Task 2.1`, but you need to do it without using the webpage. You can use command line tools, such as curl, which can send HTTP\nrequests. One thing that is worth mentioning is that if you want to include multiple parameters in HTTP requests, you need to put the URL and the parameters between a pair of single quotes; otherwise, the special characters used to separate parameters (such as &) will be interpreted by the shell program, changing the meaning of the command. The following example shows how to send an HTTP GET request to our web application, with two parameters (`username` and `Password`) attached:\n```\n$ curl 'www.seed-server.com\/unsafe_home.php?username=alice&Password=11'\n```\n\nIf you need to include special characters in the `username` or `Password` fields, you need to encode them properly, or they can change the meaning of your requests. If you want to include **single quote** in those fields, you should use **%27** instead; if you want to include **white space**, you should use **%20**. In this task, you do need to handle HTTP encoding while sending requests using `curl`.\n\n## Task 2.3: Append a new SQL statement. \nIn the above two attacks, we can only steal information from the database; it will be better if we can modify the database using the same vulnerability in the login page. An idea is to use the SQL injection attack to turn one SQL statement into two, with the second one being the update or delete statement. In SQL, semicolon (;) is used to separate two SQL statements. Please try to run two SQL statements via the login page.\n\nThere is a countermeasure preventing you from running two SQL statements in this attack. Please use the SEED book or resources from the Internet to figure out what this countermeasure is, and describe your discovery in the lab report.","variant_answers":false,"solution":"follow the instructions.","answer":"Secret answer","max_score":50,"incorrect_answer_limit":0,"order":3,"reference_solution":[]}]}